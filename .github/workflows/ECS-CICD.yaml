name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 799886310010.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: hnn
  ECS_CLUSTER: ${{secrets.ECS_CLUSTER}}
  ECS_SERVICE: ${{secrets.ECS_SERVICE}}
  DEV_ENV: ${{secrets.DEV_ENV}}
  PROD_ENV: ${{secrets.PROD_ENV}}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: create env
        run: |
          echo $DEV_ENV >> .dev.env
          echo $PROD_ENV >> .prod.env

      - name: Delete images
        run: |
          IMAGES=$(aws ecr describe-images --repository-name ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}} --region ap-northeast-2 | gawk 'match($0, /imageDigest\": \"sha256:[a-f0-9]+\"/, ary) {print substr(ary[0], RSTART+14, RLENGTH-15)}')
          for image in $IMAGES; do
            echo "Deleting $image"
            aws ecr batch-delete-image --repository-name ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}} --image-ids imageDigest=$image --region ap-northeast-2
          done

      - name: Build, tag, and push the image(node.js) to Amazon ECR
        id: build-image-node
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG_NODE: hnn-nest

        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 799886310010.dkr.ecr.ap-northeast-2.amazonaws.com
          docker-compose build
          docker-compose push

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{env.ECS_CLUSTER}} --service ${{env.ECS_SERVICE}} --force-new-deployment
